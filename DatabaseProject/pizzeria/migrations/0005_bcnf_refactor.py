# Generated by Django 5.2.6 on 2025-09-29 10:34

from decimal import Decimal

from django.db import migrations, models
import django.db.models.deletion


def forward_bcnf(apps, schema_editor):
    PostalArea = apps.get_model('pizzeria', 'PostalArea')
    Customer = apps.get_model('pizzeria', 'Customer')
    DeliveryPerson = apps.get_model('pizzeria', 'DeliveryPerson')
    DeliveryZoneAssignment = apps.get_model('pizzeria', 'DeliveryZoneAssignment')
    OrderItem = apps.get_model('pizzeria', 'OrderItem')
    CustomerOrder = apps.get_model('pizzeria', 'CustomerOrder')
    OrderAdjustment = apps.get_model('pizzeria', 'OrderAdjustment')
    OrderDiscountApplication = apps.get_model('pizzeria', 'OrderDiscountApplication')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    pizza_ct = ContentType.objects.get(app_label='pizzeria', model='pizza')
    drink_ct = ContentType.objects.get(app_label='pizzeria', model='drink')
    dessert_ct = ContentType.objects.get(app_label='pizzeria', model='dessert')

    postal_map = {}

    unknown_area, _ = PostalArea.objects.get_or_create(
        postal_code='UNKNOWN',
        defaults={'city': 'Unknown', 'country': 'Belgium'},
    )
    postal_map['UNKNOWN'] = unknown_area

    def resolve_area(code, city='', country='Belgium'):
        code = (code or '').strip()
        city = (city or '').strip()
        country = (country or 'Belgium').strip() or 'Belgium'
        if not code:
            return unknown_area
        if code in postal_map:
            area = postal_map[code]
            if not area.city and city:
                area.city = city
                area.country = country
                area.save(update_fields=['city', 'country'])
            return area
        defaults = {
            'city': city or 'Unknown',
            'country': country,
        }
        area, created = PostalArea.objects.get_or_create(
            postal_code=code,
            defaults=defaults,
        )
        if not created and not area.city and defaults['city']:
            area.city = defaults['city']
            area.country = defaults['country']
            area.save(update_fields=['city', 'country'])
        postal_map[code] = area
        return area

    for customer in Customer.objects.all():
        area = resolve_area(
            getattr(customer, 'postal_code', None),
            getattr(customer, 'city', ''),
            getattr(customer, 'country', 'Belgium'),
        )
        customer.postal_area_id = area.id
        customer.save(update_fields=['postal_area'])

    for driver in DeliveryPerson.objects.all():
        area = resolve_area(getattr(driver, 'postal_code', None))
        driver.postal_area_id = area.id
        driver.save(update_fields=['postal_area'])

    for assignment in DeliveryZoneAssignment.objects.all():
        area = resolve_area(getattr(assignment, 'postal_code', None))
        assignment.postal_area_id = area.id
        assignment.save(update_fields=['postal_area'])

    for order in CustomerOrder.objects.all():
        loyalty = getattr(order, 'loyalty_discount_amount', Decimal('0')) or Decimal('0')
        if loyalty > 0:
            OrderAdjustment.objects.create(
                order_id=order.id,
                adjustment_type='loyalty',
                amount=loyalty,
            )
        birthday = getattr(order, 'birthday_discount_amount', Decimal('0')) or Decimal('0')
        if birthday > 0:
            OrderAdjustment.objects.create(
                order_id=order.id,
                adjustment_type='birthday',
                amount=birthday,
            )
        applied_code_id = getattr(order, 'applied_discount_code_id', None)
        code_amount = getattr(order, 'code_discount_amount', Decimal('0')) or Decimal('0')
        if applied_code_id:
            application, created = OrderDiscountApplication.objects.get_or_create(
                order_id=order.id,
                discount_code_id=applied_code_id,
                defaults={'amount': code_amount},
            )
            if not created and code_amount and application.amount != code_amount:
                application.amount = code_amount
                application.save(update_fields=['amount'])

    for item in OrderItem.objects.all():
        if getattr(item, 'pizza_id', None):
            item.content_type_id = pizza_ct.id
            item.object_id = item.pizza_id
        elif getattr(item, 'drink_id', None):
            item.content_type_id = drink_ct.id
            item.object_id = item.drink_id
        elif getattr(item, 'dessert_id', None):
            item.content_type_id = dessert_ct.id
            item.object_id = item.dessert_id
        else:
            continue
        item.save(update_fields=['content_type', 'object_id'])


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('pizzeria', '0004_customerdiscountredemption_customerloyalty_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='PostalArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('postal_code', models.CharField(max_length=12, unique=True)),
                ('city', models.CharField(blank=True, max_length=80)),
                ('country', models.CharField(default='Belgium', max_length=80)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['postal_code'],
            },
        ),
        migrations.AddField(
            model_name='customer',
            name='postal_area',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='customers', to='pizzeria.postalarea'),
        ),
        migrations.AddField(
            model_name='deliveryperson',
            name='postal_area',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='delivery_people', to='pizzeria.postalarea'),
        ),
        migrations.AddField(
            model_name='deliveryzoneassignment',
            name='postal_area',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='zone_assignments', to='pizzeria.postalarea'),
        ),
        migrations.CreateModel(
            name='OrderAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adjustment_type', models.CharField(choices=[('loyalty', 'Loyalty discount'), ('birthday', 'Birthday discount')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='adjustments', to='pizzeria.customerorder')),
            ],
            options={
                'ordering': ['order', 'adjustment_type'],
                'unique_together': {('order', 'adjustment_type')},
            },
        ),
        migrations.AddField(
            model_name='orderitem',
            name='content_type',
            field=models.ForeignKey(
                limit_choices_to=models.Q(app_label='pizzeria', model__in=['pizza', 'drink', 'dessert']),
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to='contenttypes.contenttype',
            ),
        ),
        migrations.AddField(
            model_name='orderitem',
            name='object_id',
            field=models.PositiveIntegerField(null=True),
        ),
        migrations.RunPython(forward_bcnf, migrations.RunPython.noop),
        migrations.AlterUniqueTogether(
            name='deliveryzoneassignment',
            unique_together=set(),
        ),
        migrations.RemoveConstraint(
            model_name='orderitem',
            name='order_item_product_presence',
        ),
        migrations.RemoveField(
            model_name='customer',
            name='city',
        ),
        migrations.RemoveField(
            model_name='customer',
            name='country',
        ),
        migrations.RemoveField(
            model_name='customer',
            name='postal_code',
        ),
        migrations.RemoveField(
            model_name='deliveryperson',
            name='postal_code',
        ),
        migrations.RemoveField(
            model_name='deliveryzoneassignment',
            name='postal_code',
        ),
        migrations.AlterModelOptions(
            name='deliveryzoneassignment',
            options={'ordering': ['delivery_person', 'priority', 'postal_area__postal_code']},
        ),
        migrations.RemoveField(
            model_name='orderitem',
            name='dessert',
        ),
        migrations.RemoveField(
            model_name='orderitem',
            name='drink',
        ),
        migrations.RemoveField(
            model_name='orderitem',
            name='item_type',
        ),
        migrations.RemoveField(
            model_name='orderitem',
            name='pizza',
        ),
        migrations.RemoveField(
            model_name='customerorder',
            name='applied_discount_code',
        ),
        migrations.RemoveField(
            model_name='customerorder',
            name='birthday_discount_amount',
        ),
        migrations.RemoveField(
            model_name='customerorder',
            name='code_discount_amount',
        ),
        migrations.RemoveField(
            model_name='customerorder',
            name='discount_amount',
        ),
        migrations.RemoveField(
            model_name='customerorder',
            name='loyalty_discount_amount',
        ),
        migrations.RemoveField(
            model_name='customerorder',
            name='subtotal_amount',
        ),
        migrations.AlterField(
            model_name='customer',
            name='postal_area',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='customers', to='pizzeria.postalarea'),
        ),
        migrations.AlterField(
            model_name='deliveryperson',
            name='postal_area',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='delivery_people', to='pizzeria.postalarea'),
        ),
        migrations.AlterField(
            model_name='deliveryzoneassignment',
            name='postal_area',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zone_assignments', to='pizzeria.postalarea'),
        ),
        migrations.AlterField(
            model_name='orderitem',
            name='content_type',
            field=models.ForeignKey(
                limit_choices_to=models.Q(app_label='pizzeria', model__in=['pizza', 'drink', 'dessert']),
                on_delete=django.db.models.deletion.PROTECT,
                to='contenttypes.contenttype',
            ),
        ),
        migrations.AlterField(
            model_name='orderitem',
            name='object_id',
            field=models.PositiveIntegerField(),
        ),
        migrations.AlterUniqueTogether(
            name='deliveryzoneassignment',
            unique_together={('delivery_person', 'postal_area')},
        ),
        migrations.AddConstraint(
            model_name='orderitem',
            constraint=models.UniqueConstraint(fields=('order', 'content_type', 'object_id'), name='order_item_unique_product'),
        ),
        migrations.AddConstraint(
            model_name='orderadjustment',
            constraint=models.CheckConstraint(check=models.Q(amount__gt=0), name='order_adjustment_amount_gt_0'),
        ),
    ]
