# Generated by Django 5.2.6 on 2025-09-20 13:15

import django.db.models.deletion
import django.db.models.functions.datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pizzeria', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PizzaPricing',
            fields=[
                ('pizza', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='pizzeria.pizza')),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField()),
                ('ingredient_cost', models.DecimalField(decimal_places=2, max_digits=12)),
                ('price_with_margin', models.DecimalField(decimal_places=2, max_digits=12)),
                ('final_price_with_vat', models.DecimalField(decimal_places=2, max_digits=12)),
                ('is_vegetarian_computed', models.BooleanField()),
                ('is_vegan_computed', models.BooleanField()),
            ],
            options={
                'verbose_name': 'Pizza pricing',
                'verbose_name_plural': 'Pizza pricing',
                'db_table': 'pizza_pricing',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PizzaIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('position', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['pizza', 'position', 'ingredient__name'],
            },
        ),
        migrations.AddConstraint(
            model_name='customer',
            constraint=models.CheckConstraint(condition=models.Q(('birthdate__lte', django.db.models.functions.datetime.Now())), name='customer_birthdate_not_future'),
        ),
        migrations.AddField(
            model_name='pizzaingredient',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='pizza_ingredients', to='pizzeria.ingredient'),
        ),
        migrations.AddField(
            model_name='pizzaingredient',
            name='pizza',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pizza_ingredients', to='pizzeria.pizza'),
        ),
        migrations.AddField(
            model_name='pizza',
            name='ingredients',
            field=models.ManyToManyField(blank=True, related_name='pizzas', through='pizzeria.PizzaIngredient', to='pizzeria.ingredient'),
        ),
        migrations.AddConstraint(
            model_name='pizzaingredient',
            constraint=models.CheckConstraint(condition=models.Q(('quantity__gt', 0)), name='pizza_ingredient_quantity_gt_0'),
        ),
        migrations.AlterUniqueTogether(
            name='pizzaingredient',
            unique_together={('pizza', 'ingredient')},
        ),
        migrations.RunSQL(
            sql="""
                CREATE OR REPLACE VIEW pizza_pricing AS
                SELECT
                    p.id AS pizza_id,
                    p.description,
                    p.is_active,
                    SUM(pi.quantity * i.unit_cost) AS ingredient_cost,
                    ROUND(SUM(pi.quantity * i.unit_cost) * 1.40, 2) AS price_with_margin,
                    ROUND(SUM(pi.quantity * i.unit_cost) * 1.40 * 1.09, 2) AS final_price_with_vat,
                    BOOL_AND(NOT i.is_meat) AS is_vegetarian_computed,
                    BOOL_AND(NOT i.is_meat AND NOT i.is_dairy) AS is_vegan_computed
                FROM pizzeria_pizza p
                JOIN pizzeria_pizzaingredient pi ON pi.pizza_id = p.id
                JOIN pizzeria_ingredient i ON i.id = pi.ingredient_id
                GROUP BY p.id, p.description, p.is_active;
            """,
            reverse_sql="DROP VIEW IF EXISTS pizza_pricing;",
        ),
    ]
